《Web前端开发实战（第1辑）（套装共3册）》的京东读书笔记
作者:莫振杰

● 1.1 Web技术简介
----------------------
2019-03-24
【原文】  HTML→CSS→JavaScript→jQuery→CSS3→HTML5→ASP.NET（或PHP）→AJAX 


● 1.2 HTML是什么
----------------------
2019-03-24
【原文】  HTML，全称“Hyper Text Markup Language”（超文本标记语言），它是制作万维网页面的标准语言。
HTML不是一门编程语言，而是一门描述性的“标记语言”。


● 3.2 head标签
----------------------
2019-03-24
【原文】  meta标签又叫“元信息标签”，是head标签内的一个辅助性标签。
----------------------
2019-03-24
【原文】  一般用来定义页面的关键字、页面的描述等，以方便搜索引擎蜘蛛（如百度蜘蛛、谷歌蜘蛛）来搜索到这个页面的信息
----------------------
2019-03-24
【原文】  meta标签有两个重要的属性name和http-equiv
----------------------
2019-03-24
【原文】  http-equiv属性，我们只需要了解它的以下两个作用就行了。
（1）定义页面所使用的语言。
（2）实现页面的自动刷新跳转。


● 4.1 段落与文字简介
----------------------
2019-03-05
【原文】  判断一个页面是动态页面还是静态页面，标准在于是否与服务器进行交互


● 4.2 标题标签
----------------------
2019-03-24
【原文】  文章标题使用h1标签，大标题使用h2标签


● 4.4 文本格式化标签
----------------------
2019-03-24
【原文】  想要对文本加粗，尽量用strong标签，不要用b标签，这是由于strong标签比b标签更具有语义性
----------------------
2019-03-24
【原文】  对于要对文本进行斜体设置，尽量用<em>标签，其他两个用得极少。
----------------------
2019-03-24
【原文】  大字号标签和小字号标签在实际开发中极少使用，因为这两个标签都是纯样式标签，我们可以用CSS来控制字体的大小。
为了网页语义化，<small>标签也有一个非常大的用途，那就是用于网页底部的版权声明。
----------------------
2019-03-24
【原文】  s>标签用来呈现那些不再准确或不再相关的内容。
----------------------
2019-03-24
【原文】  在实际开发中，删除线效果常见于商品标价中
----------------------
2019-03-24
【原文】  在我们学了CSS之后，对于删除线效果，一般采用“text-decoration:line-through”实现，极少使用<s>标签实现。


● 4.6 <div>标签
----------------------
2019-03-05
【原文】  <div>标签，主要用来为HTML文档内大块的内容提供结构和CSS样式控制。div，即“division”（分区），用来划分一个区域


● 4.7 网页特殊符号
----------------------
2019-03-24
【原文】  当我们学完了CSS之后，对于段落首行缩进我们都会使用text-indext属性来控制。


● 4.8 自闭合标签
----------------------
2019-03-24
【原文】   一般标签由于有开始符号和结束符号，可以在标签内部插入其他标签或文字。
② 自闭合标签由于没有结束符号，没办法在内部插入其他标签或文字，只能定义自身的一些属性。
----------------------
2019-03-24
【原文】  常见的自闭合标签
① <meta/> 定义页面的说明信息，供搜索引擎查看。
② <link/> 用于连接外部的CSS文件或脚本文件。
③ <base/> 定义页面所有链接的基础定位。
④ <br/> 用于换行。
⑤ <hr/> 为水平线。


● 5.2 有序列表
----------------------
2019-03-05
【原文】  ol，即“ordered list”（有序列表）。li，即“list item”（列表项）。


● 5.5 HTML中的大误区
----------------------
2019-03-24
【原文】  语义这种东西非常重要，编写一个语义结构良好清晰的网页，这正是你学习HTML的目的。


● 7.3 图片格式
----------------------
2019-03-24
【原文】  在制作页面的时候，设计者一般选择24位图像。32位图像虽然质量好，但同时也带来更大的图像容量。如果一个页面使用体积过大的图像，会使得浏览器加载页面速度变慢。事实上，一般肉眼也很难分辨24位图和32位图的区别。
放大原始位图，图像效果会失真，缩小原始位图，同样会使图像效果失真，这是因为缩小图像，减少的是图像中像素的数量
----------------------
2019-03-24
【原文】  一个真正的前端工程师，都得掌握基本的图片处理技术，不过不必太过于深入，只需要掌握基本的PS技术（如切图、图片压缩、格式转换、基本操作等）即可。


● 8.2 a标签
----------------------
2019-03-05
【原文】  超链接的范围很广，可以将文档中的任何文字及任意位置的图片设置为超链接，如图8-2。超链接有外部链接、内部链接、电子邮件链接、锚点链接、空连接、脚本链接等。


● 9.10 隐藏域hidden
----------------------
2019-03-05
【原文】  能用CSS实现的，就不要用图片来实现。这是因为图片往往数据传输量大，影响页面加载速度；而如果用CSS实现，则只需要少量代码就可以了。


● 9.14 input标签按钮与button标签按钮
----------------------
2019-03-05
【原文】  除了表单按钮（使用input标签），还有一种使用button标签实现的按钮。语法：
<button>文本或图像</button>
----------------------
2019-03-05
【原文】  button标签与表单按钮相比，在button标签开始符号与结束符号之间可以插入其他标签或文本，因此它的功能更加强大


● 9.15 本章总结
----------------------
2019-03-05
【原文】  在前端开发中，表单都是要涉及提交数据到服务器的，button标签按钮不能实现这个功能，因此我们都是使用input标签按钮，基本不用button标签按钮。
当然，在真正的开发中，美观漂亮的按钮更多时候是用div标签并结合CSS来实现的，这是后话了。


● 9.16 训练题
----------------------
2019-03-05
【原文】  表单元素是否一定要放在form标签内
表单元素不一定都要放在form标签内。对于要与服务器进行交互（也可以说是跟网站后台进行交互）的表单元素，就必须放在form标签内才有效。如果表单元素不需要跟服务器进行交互，那就没必要放在form标签内。


● 第11章 框架
----------------------
2019-03-05
【原文】  由于HTML5已经舍弃了frameset标签（框架集标签


● 12.2 CSS入门简介
----------------------
2019-03-24
【原文】  CSS入门教程”讲解的是CSS2.0入门的基础知识，“CSS进阶教程”讲解的是CSS2.0进阶的技巧和方法，而“CSS3.0教程”讲解的是CSS3.0新增的属性和一些技巧。


● 12.3 CSS的三种引用方式
----------------------
2019-03-24
【原文】  实际开发中，我们一般使用外部样式表
----------------------
2019-03-24
【原文】  们可以使用内联样式表进行细节的微调


● 13.1 元素的id和class
----------------------
2019-03-05
【原文】  class元素具有相同的CSS样式。
如果你要为两个或者两个以上的元素定义相同的样式，建议使用class属性。因为这样可以减少大量的重复代码。


● 14.3 字体大小font-size
----------------------
2019-03-05
【原文】  这些font-size属性值都是相对浏览器默认情况下的字体大小而言。对于这些属性值，我们完全不需要记忆，大家要清楚这一点。因为我们在实际开发中，很少使用这种方式来定义字体大小，一般都是采用像素等作为单位的数值。


● 17.6 背景图像位置background-position
----------------------
2019-03-24
【原文】  background-positon属性只能应用于块级元素和替换元素。其中替换元素包括img、input、textarea、select和object。


● 18.1 超链接伪类
----------------------
2019-03-25
【原文】  一般情况下，我们只用到两种状态：未访问状态和鼠标经过状态。
----------------------
2019-03-25
【原文】  未访问状态，我们直接在a标签定义就行了，没必要使用“a:link”。
----------------------
2019-03-25
【原文】  定义超链接样式必须要按照“未访问样式、访问后样式、鼠标经过样式、点击时样式”才能在浏览器中正常显示这4种样式


● 18.2 深入了解:hover伪类
----------------------
2019-03-25
【原文】  :hover”伪类可以定义任何一个元素在鼠标经过时的样式！


● 18.3 鼠标样式
----------------------
2019-03-25
【原文】  在实际开发中，我们一般只用到“default”和“pointer”这两个属性值


● 19.1 图片大小
----------------------
2019-03-25
【原文】  不过在实际开发中，我们还是建议图片实际尺寸做得跟网页图片使用的尺寸相同或相似。因为图片实际大小如果过大的话，数据传输量就大，会严重影响页面的加载速度。


● 19.3 图片水平对齐
----------------------
2019-03-25
【原文】  text-align属性一般只用于两个地方：文本水平对齐和图片水平对齐。也就是说，text-align属性只对文本和img标签有效，对其他标签无效。
----------------------
2019-03-25
【原文】  在CSS中，我们可以使用vertical-align属性来定义图片的垂直对齐方式。


● 19.4 图片垂直对齐
----------------------
2019-03-25
【原文】  W3C对vertical-align属性的定义是：vertical-align属性定义行内元素相对于该元素的垂直对齐方式。


● 21.2 表格边框间距border-spacing
----------------------
2019-03-25
【原文】  border-spacing属性跟border-collapse属性一样，我们只需要对table元素中定义border-spacing属性值就行，没必要在th、td这些元素也定义，以造成代码冗余。


● 22.1 CSS盒子模型
----------------------
2019-03-05
【原文】  padding称为“内边距”，也常常称为“补白”


● 23.2 浮动float
----------------------
2019-03-25
【原文】  可以通过CSS的属性float使元素向左或向右浮动。也就是说，让盒子及其中的内容浮动到文档的右边或者左边。
----------------------
2019-03-05
【原文】  中，任何元素都可以浮动。
浮动元素会生成一个块级框，而不论它本身是何种元素。
----------------------
2019-03-25
【原文】  由于box1设置为左浮动，box1变成了浮动元素，因此此时box1的宽度不再延伸，其宽度为容纳内容的最小宽度，而相邻的下一个div元素（box2）就会紧贴着box1，
----------------------
2019-03-05
【原文】  之间有一定的距离呢？其实原因是这样的：我们在CSS中设置了box1、box2和box3都有一定的外边距（margin:15px;），如果box1为浮动元素，而相邻的box2不是浮动元素，则box2就会紧贴着box1；但是如果box1和box2同时为浮动元素，外边距就会生效。这是由于浮动元素的特性决定的。
----------------------
2019-03-25
【原文】  float属性是CSS布局中非常重要的属性，我们常常通过对div元素应用float浮动来进行布局，不但可以对整个版式进行规划，也可以对一些基本元素，如导航等进行排列。


● 23.4 本章总结
----------------------
2019-03-05
【原文】  由于p元素清除了浮动，所以p元素的前一个元素产生的浮动就不会对后续元素产生影响，因此p元素的文本不会环绕在浮动元素的周围。


● 第24章 定位布局
----------------------
2019-03-25
【原文】  布局定位共有4种方式。
① 固定定位（fixed）
② 相对定位（relative）
③ 绝对定位（absolute）
④ 静态定位（static）


● 24.3 相对定位relative
----------------------
2019-03-25
【原文】  相对定位的容器浮上来后，其所占的位置仍然留有空位，后面的无定位元素仍然不会“挤上来”。
----------------------
2019-03-25
【原文】  CSS相对定位元素的位置是相对于原始位置而言，而CSS固定定位元素的位置是相对浏览器而言！


● 24.4 绝对定位absolute
----------------------
2019-03-05
【原文】  一个元素变成了绝对定位元素，这个元素就完全脱离正常文档流了，绝对定位元素的前面或者后面的元素会认为这个元素并不存在，即这个元素浮于其他元素上面，它是独立出来的。
----------------------
2019-03-25
【原文】  默认情况下，固定定位元素和绝对定位元素的位置是相对于浏览器而言，而相对定位元素的位置是相对原始位置而言。


● 1.2 HTML、XHTML和HTML5
----------------------
2019-03-25
【原文】  HTML语法书写比较松散，利于开发者编写。但是对于机器，如电脑、手机等来说，语法越松散，处理起来越困难。因此为了让机器更好地处理HTML，我们才在HTML基础上引入了XHTML。


● 1.3 div和span
----------------------
2019-03-25
【原文】  div常用于页面中较大块的结构划分，然后配合CSS来操作；span一般用来包含文字等，它没有结构的意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS操作。
----------------------
2019-03-05
【原文】  label只适用于表单中，用于显示在输入控件旁边的说明性文字。关于label标签


● 1.4 id和class
----------------------
2019-03-05
【原文】  span包含文字，然后再进行样式修改。事实上，span标签往往都是用来配合CSS来修饰元素的
----------------------
2019-03-05
【原文】  W3C建议，对于页面关键的结构或者大结构，我们才使用id。所谓的关键结构，指的是诸如LOGO、导航、主体内容、底部信息栏等结构。对于一些小地方，还是建议使用class属性。


● 1.5 浏览器标题栏小图标
----------------------
2019-03-05
【原文】  link rel="shortcut icon" type="image/x-icon" href="favicon.ico"/>


● 2.1 语义化简介
----------------------
2019-03-25
【原文】  HTML的精髓就在于标签的语义。在HTML中，大部分标签都有它自身的语义，例如p标签，表示的是“paragraph”，标记的是一个段落；h1标签，表示“header1”，标记的是一个最高级标题……而div和span是无语义的标签，我们应该尽可能少用。
【笔记】|  对于可以找到有用的标签就不用div和span
----------------------
2019-03-05
【原文】  搜索引擎一般都是根据HTML标签来识别
----------------------
2019-03-05
【原文】  编写一个语义结构良好的页面在实际开发中极其重要。主要有两个最大的优点：①利于开发调试和后期维护；②利于搜索引擎优化。在


● 2.2 标题语义化
----------------------
2019-03-05
【原文】  1）标题语义化。
（2）图片语义化。
（3）表格语义化。
（4）表单语义化。
（5）其他语义化。
（6）语义化验证。
（7）HTML 5摒弃的标签。


● 2.5 表单语义化
----------------------
2019-03-25
【原文】  label标签用于显示在输入控件旁边的说明性文字。也就是将某个表单元素和某段说明文字关联起来。
----------------------
2019-03-25
【原文】  这就是label标签for属性的作用。for属性使得鼠标单击的范围扩大到label元素上，极大地提高了用户单击的可操作性。事实上，label标签有两种关联方式，我们拿复选框来说，下面两行代码是等价的。
<input id="cbk" type="checkbox" /><label for="cbk">复选框</label>
<label>复选框<input id="cbk" type="checkbox"/></label>


● 2.6 其他语义化
----------------------
2019-03-05
【原文】  3C标准规定，<br/>标签仅仅用于段落中的换行，不能用于其他情况。也就是说，<br/>标签只适合用于p标签内部的换行，不能用于其他标签。
----------------------
2019-03-05
【原文】  他标签。举例
----------------------
2019-03-05
【原文】  strong用于实现加粗文本，em用于实现斜体文本。基于结构和样式分离的原则，标签仅仅是为了实现简单的加粗或者斜体效果，我们一般不会用这两个。实际上，W3C对这两个标签赋予“强调”的语义，在strong或者em标签内部的文本被强调为重要文本。并且搜索引擎对这两个标签也赋予一定的权重
----------------------
2019-03-05
【原文】  。一般情况下，我们都是去掉strong和em的默认样式，然后使用CSS重新定义新的样式，但这并不影响这两个标签的语义。也就是说，样式只会改变标签的外观，但不会改变标签的语
----------------------
2019-03-25
【原文】  想要在页面显示一张图片，我们有两种方式：一是使用img标签；二是使用背景图片。这两种实现方式最明显的区别在于：使用img标签添加图片，是通过HTML来实现；使用背景图片，是通过CSS来实现。
----------------------
2019-03-05
【原文】  如果图片作为HTML的一部分，并且想要被搜索引擎识别，则应该使用img标签，例如常见的各种图片列表。如果图片仅仅是起到修饰作用，并且不想被搜索引擎识别，则应该使用背景图片。


● 2.7 语义化验证
----------------------
2019-03-05
【原文】  么平常有什么好的办法来判断一个页面是否语义良好呢？一个很简单的办法就是：去掉CSS样式，然后看页面是否还具有很好的可读性。
----------------------
2019-03-05
【原文】  中


● 3.1 CSS单位
----------------------
2019-03-07
【原文】  。
（2）line-height的百分比是相对于父元素的font-size值来计算的。
（3）vertical-align的百分比是相对当前元素的line-height值来计算的。
----------------------
2019-03-07
【原文】  em是相对于“当前元素”的字体大小而言的。其中，1em等于“当前元素”字体大小。这里的字体大小指的是以px为单位的font-size值。
----------------------
2019-03-07
【原文】  ）首行缩进使用text-indent:2em实现
----------------------
2019-03-07
【原文】  对于一个页面的字体大小，使用px作为单位时可扩展性不好，使用百分比作为单位时也不符合习惯，最佳选择是使用em作为单位来定义字体大小
----------------------
2019-03-07
【原文】  rem，全称font size of the root element，指的是相对于根元素（即html元素）的字体大小
----------------------
2019-03-07
【原文】  rem布局是也是移动端最常用的字体大小之一。


● 3.2 CSS特性
----------------------
2019-03-07
【原文】  。我们也推荐读者使用px作为单位，因为用px作为单位非常方便计算长度。
----------------------
2019-03-07
【原文】  子元素会继承父元素的字体颜色。不过我们要注意，并不是所有属性都具有继承性，如padding、margin、border等就不具备继承性
----------------------
2019-03-07
【原文】  些能够给我们轻松书写的属性才可以继承。在CSS中，具有继承性的属性有三大类。
（1）文本相关属性：font-family、font-size、font-style、font-weight、font、line-height、text-align、text-indent、word-spacing。
（2）列表相关属性：list-style-image、list-style-position、list-style-type、list-style；
（3）颜色相关属性：color。


● 3.3 CSS优先级
----------------------
2019-03-07
【原文】  如果由于继承方式引起的冲突，则“最近的祖先元素”获胜。
----------------------
2019-03-07
【原文】  的选择器优先级如下。
行内样式> id选择器> class选择器>元素选择器
----------------------
2019-03-07
【原文】  strong
　　　　{
　　　　　　color:Black !important;
　　　　}
----------------------
2019-03-07
【原文】  为在优先级相同的情况下，后面定义的会覆盖前面定义的（后来者居上）。


● 3.4 CSS引入方式
----------------------
2019-03-25
【原文】  对于CSS优先级，主要就是以下两个黄金定律。
（1）优先级高的样式覆盖优先级低的样式。
（2）同一优先级的样式，后定义的覆盖先定义的，即后来者居上。
----------------------
2019-03-25
【原文】  如果我们把这些个别样式放到公有样式中，会导致所有页面都加载一次个别样式，这样会影响加载速度。


● 3.5 CSS选择器
----------------------
2019-03-07
【原文】  在实际开发中，我们应该灵活地配合使用外部样式表、内部样式表以及行内样式表，并不是一味地只用外部样式表。事实上，外部样式表多用于公有样式，内部样式表多用于私有样式，而行内样式更多用于小修改或者优先级方面。
----------------------
2019-03-07
【原文】  /*去除所有元素默认的padding和margin*/
　　　　*{padding:0;margin:0}
　　　　/*去除列表项默认符号*/
　　　　ul{list-style-type:none;}


● 4.5 CSS reset
----------------------
2019-03-07
【原文】  有些时候为了保留一些版权声明的注释说明，可以采用以下方式：
/*!注释内容*/
也就是说在注释内容最前面加上一个“!”，这样压缩工具就不会删除这条注释信息了。
----------------------
2019-03-07
【原文】  重置样式
----------------------
2019-03-07
【原文】  CSS reset代码必须在其他CSS之前引入，道理很简单：浏览器对CSS代码是从上到下来解析的。只有把CSS reset放在前面，才有意义。


● 5.4 外边距叠加
----------------------
2019-03-25
【原文】  在实际开发中，给大家一个建议：最好统一使用margin-top或margin-bottom，不要混合使用，从而降低出现问题的风险。当然这在技术上并不是必需的，但却是一个良好的习惯。


● 5.5 负margin技术
----------------------
2019-03-25
【原文】  当margin为负数的时候，对普通文档流元素和对浮动元素的影响是不一样的
----------------------
2019-03-26
【原文】  元素垂直居中
想要实现块元素的垂直居中一般来说比较麻烦，不过有一个经典的方法，就是使用position结合负margin来实现。具体做法是：首先给父元素写上“position:relative”，这样做是为了给子元素添加“position:absolute”的时候不会被定位到“外太空”去。然后给子元素添加如下属性：
position:absolute;
top:50%;
left:50%;
之后再添加如下属性：
margin-top:"height值一半的负值";
margin-left:"width值一半的负值"。
----------------------
2019-03-26
【原文】  position这种方法是万能的，也就是不仅可以用于块元素（block），还可以用于inline元素和inline-块元素


● 5.6 overflow
----------------------
2019-03-26
【原文】  在CSS中，我们可以使用overflow属性来定义当内容溢出元素边框时发生的事情。
----------------------
2019-03-26
【原文】  对于overflow属性，最常见的三个用途如下。
（1）使用“overflow:scroll”显示滚动条。
（2）使用“overflow:hidden”来隐藏内容，以免影响布局。
（3）使用“overflow:hidden”来清除浮动。
----------------------
2019-03-26
【原文】   浮动引起的父元素高度塌陷分析：
当我们为id为wrapper的div元素添加“overflow:hidden”之后，在浏览器预览效果如图5-32所示。从中可以看出，浮动已经被清除了。
【笔记】|  这种情况是在父元素没有设置高度的情况下产生的


● 6.2 display简介
----------------------
2019-03-26
【原文】  ？
在CSS中，我们可以使用display属性来改变元素的类型。
----------------------
2019-03-26
【原文】  在实际开发中，我们可能经常需要为span等行内元素定义一定的width和height，此时应该考虑到“display:inline-block;”


● 6.3 display:none
----------------------
2019-03-26
【原文】  此外对于块元素，IE6和IE7不能识别“display:inline-block”，加不加“display:inline-block”对它们完全没有任何影响。解决方法是：在IE6和IE7中用“display:inline;zoom:1;”来代替“display:inline-block;”
----------------------
2019-03-26
【原文】  CSS中，我们可以使用“display:none”来隐藏元素。“display:none”用得很多，如二级导航、tab选项卡等地方都用到
----------------------
2019-03-26
【原文】  ）“display:none”一般用于JavaScript动态隐藏元素，被隐藏的元素不占据原来的位置空间。
（2）“display:none”不推荐用来隐藏一些对SEO关键的部分。因为对于搜索引擎来说，它会直接忽略“display:none”隐藏的内容，不把“display:none”隐藏的内容加入权重考虑。
----------------------
2019-03-26
【原文】  我们给第2个div添加“display:none;”属性后，在浏览器预览效果如图6-5所示。
----------------------
2019-03-26
【原文】  们会发现第二个div元素隐藏了，并且被隐藏的元素不再占据原来位置的空间。
----------------------
2019-03-26
【原文】  在CSS中，如果想要隐藏某一个元素，我们可以使用“display:none”或者“visibility:hidden”来实现。但是这两者也有本质上的区别。
----------------------
2019-03-26
【原文】  （1）“display:none”的元素被隐藏之后，不占据原来的位置。也就是说彻底地消失了，看不见也摸不着。
（2）“visibility:hidden”的元素被隐藏之后，依然占据原来的位置。也就是说并没有彻底消失，看不见但摸得着。
【笔记】|  可根据语义来分析，display为none是没有元素类型，就是没有元素，而visibility为hidden表示元素禁止可见，但实际存在。


● 6.4 display:table-cell
----------------------
2019-03-26
【原文】  “display:table-cell”非常强大，可以实现以下三种功能。
（1）图片垂直居中于元素。
（2）等高布局。
（3）自动平均划分元素，并且在一行显示。
----------------------
2019-03-26
【原文】  我们知道，同一行的单元格td元素高度是相等的。因此，table-cell元素也具备这个特点。根据这个特点，我们可以实现等高布局效果。
----------------------
2019-03-26
【原文】  是我们都知道好友动态右栏的内容多少往往都是不确定的，如果定义固定高度的话，内容超出了高度怎么办？这个时候使用上面介绍的等高的自适应布局就可以完美解决了。在自适应的等高布局中，左右两栏都不定义高度，而是由内容撑起来，左右两栏的高度都相同。这个技巧非常实用，建议大家一定要掌握。


● 6.5 去除inline-block元素间距
----------------------
2019-03-26
【原文】  在图中我们可以看到inline-block元素之间是有间距的。在实际开发中，这种间距有时会对我们的布局产生影响。大多数时候为了不影响布局，我们需要去除inline-block元素的间距。
在CSS中，我们可以使用“font-size:0”来去除inline-block元素的间距。
----------------------
2019-03-26
【原文】  父元素{font-size:0;}说明：
“font-size:0”是在inline-block元素的父元素添加的。


● 7.2 深入text-indent
----------------------
2019-03-26
【原文】  有过开发经验的小伙伴们，或多或少会见过“text-indent:-9999px;”这种写法。“text-indent:-9999px;”一般用于LOGO部分。在搜索引擎优化中，h1是非常重要的标签。一般情况下，我们都是把网站的LOGO图片放到h1标签中。
----------------------
2019-03-26
【原文】  有一个很好的解决方法就是：指定h1元素的长宽与LOGO图片的长宽一样，然后定义h1的背景图片（background-image）为LOGO图片
----------------------
2019-03-26
【原文】  ？对于使用“display:none;”来隐藏的文字，搜索引擎一般都把这些文字当做垃圾信息而忽略，此时h1的权重会丢失


● 7.3 深入text-align
----------------------
2019-03-26
【原文】  text-align还有一个属性值为justify（两端对齐），不过由于这个属性值本身会产生一些问题，所以在实际开发中比较少用
----------------------
2019-03-11
【原文】  text-align对文字、inline元素（行内元素）以及inline-block元素（行内块元素）起作用，但对块元素不起作用


● 7.4 深入line-height
----------------------
2019-03-26
【原文】  1）“text-align:center;”实现的是文字、inline元素以及inline-block元素的水平居中。
（2）“margin:0 auto;”实现的是块元素的水平居中。
（3）“text-align:center;”在父元素中定义，“margin:0 auto;”在当前元素中定义。7.4 深入line-height
----------------------
2019-03-26
【原文】  line-height还有一个更加准确的定义：两行文字基线之间的距离。
----------------------
2019-03-26
【原文】  行距，指的是上一行的底线到下一行的顶线的垂直距离。也就是两行文字之间的空隙。
----------------------
2019-03-26
【原文】  内容区，指的是行盒子顶线到底线之间的垂直距离。
----------------------
2019-03-26
【原文】  行框，指的是两行文字“行半距分割线”之间的垂直距离。
----------------------
2019-03-26
【原文】  一行文字的高度是由line-height决定，而不是由height决定的
----------------------
2019-03-11
【原文】  在CSS中，我们可以定义height和line-height这两个属性值相等，从而来实现单行文字的垂直居中。这是经常使用到的一个技巧，希望大家记住。举例：
----------------------
2019-03-26
【原文】  line-height取值为百分比值、em值
当line-height值为百分比值或者em值时，当前元素的行高是相对于父元素的font-size值来计算的
----------------------
2019-03-26
【原文】  line-height取值为百分比值、em值
当line-height值为百分比值或者em值时，当前元素的行高是相对于父元素的font-size值来计算的
----------------------
2019-03-26
【原文】  line-height取值为百分比值、em值
当line-height值为百分比值或者em值时，当前元素的行高是相对于父元素的font-size值来计算的
----------------------
2019-03-26
【原文】  当line-height值为百分比值或者em值时，当前元素的行高是相对于父元素的font-size值来计算的。计算公式如下：
line-height = （父元素font-size）×（百分比）
line-height = （父元素font-size）×（em值）
【笔记】|  父元素的font-size值乘上它继承或设置的行高百分比或em值
----------------------
2019-03-26
【原文】  中，#outer-box的行高为30px× 1.5=45px。由于line-height具有继承性，当line-height取值为百分比时，会直接继承父元素的line-height（除非自己指定line-height）。
----------------------
2019-03-26
【原文】  中，#outer-box的行高为30px× 1.5=45px。由于line-height具有继承性，当line-height取值为百分比时，会直接继承父元素的line-height（除非自己指定line-height）。
----------------------
2019-03-26
【原文】  中，#outer-box的行高为30px× 1.5=45px。由于line-height具有继承性，当line-height取值为百分比时，会直接继承父元素的line-height（除非自己指定line-height）。
----------------------
2019-03-26
【原文】  中，#outer-box的行高为30px× 1.5=45px。由于line-height具有继承性，当line-height取值为百分比时，会直接继承父元素的line-height（除非自己指定line-height）。
【笔记】|  行高会有继承性，行高若为百分比或em，则根据父元素的font-size设置，但是子元素会继承行高的百分比和em值
----------------------
2019-03-26
【原文】  line-height还支持无单位数字的属性取值，在CSS中也只有line-height属性具有这个特点。当line-height值为无单位数字时，实际的行高是相对于当前元素的font-size值来计算的。计算公式如下：
line-height = （当前元素的font-size）×（无单位数字）
----------------------
2019-03-26
【原文】  line-height还支持无单位数字的属性取值，在CSS中也只有line-height属性具有这个特点。当line-height值为无单位数字时，实际的行高是相对于当前元素的font-size值来计算的。计算公式如下：
line-height = （当前元素的font-size）×（无单位数字）
----------------------
2019-03-26
【原文】  line-height还支持无单位数字的属性取值，在CSS中也只有line-height属性具有这个特点。当line-height值为无单位数字时，实际的行高是相对于当前元素的font-size值来计算的。计算公式如下：
line-height = （当前元素的font-size）×（无单位数字）
----------------------
2019-03-26
【原文】  line-height还支持无单位数字的属性取值，在CSS中也只有line-height属性具有这个特点。当line-height值为无单位数字时，实际的行高是相对于当前元素的font-size值来计算的。计算公式如下：
line-height = （当前元素的font-size）×（无单位数字）


● 7.5 深入vertical-align
----------------------
2019-03-26
【原文】  无单位数字可以理解为一个系数。子元素继承的是父元素的系数，不会直接继承父元素的line-height。
----------------------
2019-03-26
【原文】  vertical-align属性用于定义“周围的文字、inline元素以及inline-block元素”相对于该元素基线的垂直对齐方式。这里的“该元素”指的是被定义了vertical-align属性的元素。
----------------------
2019-03-26
【原文】  在表格单元格中，vertical-align属性可以定义单元格td元素中内容的对齐方式。td元素是table-cell元素，也就是说vertical-align属性对table-cell类型元素有效。
----------------------
2019-03-26
【原文】  vertical-align属性对inline元素、inline-block元素和table-cell元素有效，对块元素无效。
----------------------
2019-03-26
【原文】  vertical-align属性允许指定负长度值（如-2px）和百分比值（如50%）。
----------------------
2019-03-26
【原文】  vertical-align属性取值有三种情况：负值、百分比和关键字。
----------------------
2019-03-26
【原文】  vertical-align属性取值可以为负值，例如“vertical-align:-2px”表示元素相对于基线向下偏移2px。
----------------------
2019-03-26
【原文】  vertical-align属性取值可以为百分比，这个百分比是相对于当前元素所继承的line-height属性值决定的。
----------------------
2019-03-26
【原文】  在HTML中，常见的inline-block元素有两个：img元素和input元素。对于这两个inline-block元素，我们一定要记
----------------------
2019-03-26
【原文】  vertical-align属性对inline元素、inline-block元素和table-cell元素有效，对块元素无效。
----------------------
2019-03-26
【原文】  想要在div中实现图片的垂直居中，我们可以先为div定义display:table-cell，也就是将块元素转化为table-cell元素（表格单元格），然后再使用vertical-align:middle就可以实现了。
----------------------
2019-03-26
【原文】  inline元素和inline-block元素的vertical-align是针对周围的元素来说的，vertical定义的是周围元素相对于当前元素的对齐方式。
（2）table-cell元素的vertical-align属性是针对自身而言。vertical-align定义的是内部子元素相对于自身的对齐方式。


● 8.2 深入radio和checkbox
----------------------
2019-03-26
【原文】  前我们接触过vertical-align属性，单选框或复选框与文字默认情况下是以vertical-align:baseline的方式对齐的，这也是导致单选框或复选框与文字在垂直方向不居中对齐的原因。
----------------------
2019-03-26
【原文】  当文字大小为12px时，我们给单选框或复选框定义“vertical-align:-3px”即可解决对齐问题。
（2）当文字大小为14px时，我们给单选框或复选框定义“vertical-align:-2px”即可解决对齐问题。


● 8.3 深入textarea
----------------------
2019-03-26
【原文】  如果你的页面文字大小为15px、16px等，办法也是一样的。我们只需要稍微调整一下vertical-align属性的数值，直到效果满意即可，很简单。
----------------------
2019-03-26
【原文】  如果用户过分拖动textarea的大小会影响页面布局，使得页面不美观。因此在实际开发中我们往往都是设定固定大小或者禁止拖动。1．固定大小
在CSS中，我们可以使用min-width和min-height来定义textarea的最小宽度和最大高度，也可以使用max-width和max-height来定义textarea的最大宽度和最大高度。
----------------------
2019-03-26
【原文】  一般情况下对于textarea元素来说，min-width和min-height用得较少，max-width和max-height用得较多。max-width和max-height可以控制textarea的最大宽度和最大高度，使得用户在拖动小三角的同时，不会破坏原来的布局。
----------------------
2019-03-26
【原文】  如果我们想要彻底禁止用户拖动小三角来改变textarea元素大小，可以使用CSS中的resize属性来实现。语法：
resize:none;说明：
“resize:none”表示禁用textarea元素的拖动功能，此时textarea元素右下方的小三角会消失。
----------------------
2019-03-26
【原文】  如果想要禁止用户拖动textarea，除了可以用“resize:none”之外，还有一种方法：将max-width与width定义相同值，并且将max-height与height定义相同值。不过在实际开发中，还是推荐使用“resize:none”这种实现方式比较简单。
----------------------
2019-03-26
【原文】  那在实际开发中，怎么使得textarea在Chrome（或Firefox）和IE下具有相同的外观效果呢？其实很简单。
（1）使用CSS的width和height来定义textarea的大小。
（2）使用“overflow:auto”来定义textarea的滚动条自适应。


● 8.4 表单对齐
----------------------
2019-03-26
【原文】  很多大型网站包括百度、京东、腾讯等都是采用如下方法来实现。
（1）每一行表单分为左栏加若干右栏。所有行的左栏长度相等，所有行的右栏所有盒子长度之和相等。左栏一般是一个label，右栏是若干个文本框。
（2）所有左栏盒子和右栏盒子都设置为左浮动。
（3）左栏text-align属性定义为right，使得文字右对齐。
（4）最重要一点，每一行中左栏长度和右栏所有盒子的总长度之和等于行宽。这里的盒子是包括width、padding、border和margin的。
----------------------
2019-03-26
【原文】  　/*清除每一个p中的浮动*/
　　　　p{overflow:hidden;
【笔记】|  当子元素设置为浮动时，防止父元素塌陷，给父元素设置overflow为hidden
----------------------
2019-03-26
【原文】  　input:not(#submit)
【笔记】|  除去submit.元素之外的元素。
----------------------
2019-03-26
【原文】  浏览器自带的调试工具可以很好地帮助我们查看各个盒子的长度情况，方便我们调试。
----------------------
2019-03-26
【原文】  此外，在页面布局中如果碰到问题，建议大家多去查看大型网站源码中的解决方案，相信你能从中学到很多东西。


● 9.1 正常文档流
----------------------
2019-03-26
【原文】  正常文档流，又称为“普通文档流”或“普通流”，也就是W3C标准所说的“normal flow”。
----------------------
2019-03-26
【原文】  正常文档流指的就是默认情况下页面元素的布局情况。
----------------------
2019-03-26
【原文】  如果我们想要改变正常文档流，可以使用有两种方法：浮动和定位。


● 9.2 深入浮动
----------------------
2019-03-26
【原文】  浮动，可以使得元素移到左边或者右边，并且允许后面的文字或元素环绕着它。浮动，最常用于实现水平方向上的并排布局，例如两列布局、多列布局
----------------------
2019-03-26
【原文】  浮动涉及的理论知识却非常多，其中包括：块元素和行内元素、CSS盒子模型、脱离文档流、BFC、层叠上下文。
----------------------
2019-03-26
【原文】  于浮动，具有以下两个最重要的特点。
（1）当一个元素定义了“float:left”或“float:right”时，不管这个元素之前是inline、inline-block或者其他类型，都会变成block类型。也就是说，浮动元素表现为块元素效果，可以定义width、height、padding和margin。这里特别要注意一下，我们可以使用margin-left或margin-right来定义浮动元素与其他元素之间的间距。
----------------------
2019-03-26
【原文】  当一个元素定义了“float:left”或“float:right”时，这个元素会脱离文档流，后面的元素会紧跟着填上空缺的位置。


● 9.3 浮动的影响
----------------------
2019-03-26
【原文】  如果一个元素设置了浮动，则不管这个元素是什么类型，都会转化为块元素，也就是display属性值为block。
----------------------
2019-03-26
【原文】  如果一个元素设置了浮动，它会脱离正常文档流。如果浮动元素的高度height大于父元素的高度height，或者父元素没有定义高度height，此时浮动元素会脱离父元素。这就是我们常见的“父元素高度塌陷”。
造成父元素高度塌陷的原因在于，父元素的高度小于子元素的高度，或者父元素没有定义高度，父元素不能把子元素包裹起来。
----------------------
2019-03-26
【原文】  当一个浮动元素，它的兄弟元素也是浮动元素时，我们分两种情况来探讨：① 同一方向的兄弟元素；② 相反方向的兄弟元素。
（1）同一方向的兄弟元素。
当一个浮动元素碰到同一个方向的兄弟元素时，这些元素会从左到右、从上到下，一个接着一个紧挨着排列。
----------------------
2019-03-26
【原文】  （2）相反方向的兄弟元素。
当一个浮动元素碰到同一个方向的兄弟元素时，这两个元素会移向两边（如果父元素宽度足够的话）。
----------------------
2019-03-26
【原文】  在这个例子中，第一个div设置了浮动，第二、三个div没有设置浮动。此时可以看出，第一个div脱离了文档流，并且覆盖了第二、三这两个div。
----------------------
2019-03-26
【原文】  当我们也为第二、三个div设置浮动（float:left）之后，在浏览器预览效果如图9-17所示。此时可以看出，第一个div不再覆盖第二、三个div。
----------------------
2019-03-26
【原文】  浮动的影响很奇葩，对布局影响很大。因此在实际开发中我们使用了浮动之后，尽量清除浮动，不然会有预想不到的后果。
----------------------
2019-03-26
【原文】  元素会脱离父元素，造成父元素高度塌陷。但是当父元素同时也是一个浮动元素的时候，这个父元素会自适应地包含该子元素。
----------------------
2019-03-26
【原文】  也就是说，如果一个元素是浮动元素（没有定义height），并且它的子元素也是浮动元素，则这个浮动元素会自适应地包含该子元素。


● 9.4 浮动的负作用
----------------------
2019-03-26
【原文】  浮动可以让我们灵活地布局，但是也会带来一定的负作用。浮动带来的最常见的负作用有两个。
（1）父元素高度塌陷，从而导致边框不能撑开，背景色无法显示。
（2）页面布局错乱。


● 9.5 清除浮动
----------------------
2019-03-26
【原文】  一个div设置了浮动，第二、三个div没有设置浮动。此时可以看出，第一个div脱离了文档流，并且覆盖了第二、三这两个div，引起了布局的错乱。
----------------------
2019-03-26
【原文】  在实际开发的过程中，如果我们因为写了某段CSS之后，突然发现页面布局错乱十分严重，此时我们首先应该想到的是浮动带来的负作用，然后认真检查一下是否没有清除浮动
----------------------
2019-03-26
【原文】  除浮动，其实就是清除元素被定义浮动之后带来的脱离文档流的影响。我们知道，浮动可以使得元素移到左边或者右边，然后后面的文字或元素会环绕着这个浮动元素。如果我们不想浮动元素后面的元素环绕着它，而是希望后面的元素回归到正常文档流时候的布局，这个时候我们可以使用清除浮动来实现。
所谓的清除浮动，就是强制去除元素浮动之后带来的影响（这些影响在前面有过详细的介绍），然后使得其他元素都回归到正常文档流。
在CSS中，常见的清除浮动的方法有三种。
（1）clear:both。
（2）overflow:hidden。
（3）::after伪元素。
----------------------
2019-03-26
【原文】  们可以使用clear属性来清除浮动。clear属性取值有三种：left、right和both。一般情况下，我们果断使用“clear:both”来清除所有浮动，非常省事。
这里注意一点，clear属性不是应用于浮动元素本身，而是应用于浮动元素后面的元素。
----------------------
2019-03-26
【原文】  了清除元素的浮动，往往会添加一个div标签。很多时候这个div标签仅仅是为了清除浮动而添加的，没有任何其他意义。这种是很多新手清除浮动的做法，但是这个方法破坏了HTML代码的语义，如果页面要清除多次浮动，这样就无缘无故添加了很多多余的div标签。
----------------------
2019-03-26
【原文】  CSS中，我们可以使用“overflow:hidden”来清除浮动。这里要注意一点，“overflow:hidden”应用于浮动元素的父元素，而不是当前的浮动元素
----------------------
2019-03-26
【原文】  使用“overflow:hidden”清除浮动相对“clear:both”清除浮动来说，避免添加了多余的标签，并且不会破坏HTML的语义结构。不过“overflow:hidden”是个小炸弹，它会隐藏超出父元素的内容部分，有时候这并不是我们预期的效果。
----------------------
2019-03-26
【原文】  用“clear:both”和“overflow:hidden”来清除浮动都有明显的弊端。在实际开发中，比较好的解决方案是使用“::after伪元素”结合“clear:both”来实现。
----------------------
2019-03-26
【原文】  clearfix{*zoom:1;}
.clearfix::after
{
　　clear:both;
　　content:"";
　　display:block;
　　height:0;
　　visibility:hidden;
}说明：
::after伪元素结合“clear:both”来清除浮动的方式，我们推荐用来定义成公共类（如类名为clearfix），然后进行全局引用，以便减少CSS代码。
其中::after是伪元素，在CSS3的动画效果中使用比较多。::before和::after都是常用的伪元素，建议大家自行了解一下，此处不展开介绍。“*zoom:1;”用于解决IE6、IE7浮动问题。


● 第10章 定位布局
----------------------
2019-03-26
【原文】  浮动和定位是CSS两大布局方式。浮动布局比较灵活，但不容易控制。定位布局虽然缺乏灵活性，但是却可以让用户精准地定位页面中元素的位置。在


● 10.1 深入定位
----------------------
2019-03-26
【原文】  对于定位布局，我们需要注意以下几点。
（1）默认情况下，固定定位元素和绝对定位元素的位置是相对于浏览器而言，而相对定位元素的位置是相对原始位置而言。这里注意一个前提——默认情况下。
（2）position属性一般配合top、bottom、left和right来使用。只有元素定义position属性（除了static）之后，top、bottom、left和right才生效。
（3）top、bottom、left和right这四个属性不一定全部都用到。
（4）“position:absolute”会将元素转换为块元素。
----------------------
2019-03-26
【原文】  但是在实际开发中，我们经常要实现子元素相对于父元素来定位，那该怎么办呢？语法：
　　父元素{position:relative;}
　　子元素
　　{
　　　　position:absolute;
　　　　/*定义top、bottom、left和right*/
　　}说明：
想要实现子元素相对父元素定位，我们都是给父元素定义“position:relative;”，然后给子元素定义“position:absolute;”，之后配合top、bottom、left和right来定位。这个技巧在实际开发中大量使用，它也是定位布局的精髓之一，大家一定要重点掌握。
----------------------
2019-03-26
【原文】  例子都是子元素相对父元素来定位的，但是有些时候我们想要实现子元素相对祖先元素（例如祖父元素），那怎么办呢？语法：
　　祖先元素{position:relative;}
　　子元素
　　{
　　　　position:absolute;
　　　　/*定义top、bottom、left和right*/
　　}
【笔记】|  top,right,bottom,left的百分比是相对于父或祖先元素（当父元素设置了相对时），或相对于浏览器（默认情况）的边框距离当为相对定位时，top等属性的百分比是相对于原来的位置的高宽，而为绝对定位时，百分比相对于最近的一个相对定位的元素的高宽加上内边距padding。


● 10.2 z-index属性
----------------------
2019-03-26
【原文】  虽然网页是平面的，但实际上网页是三维结构，除了x轴、y轴，它还有z轴。z轴往往都是用来设定层的先后顺序的。
----------------------
2019-03-26
【原文】  在CSS中，我们可以使用z-index属性来控制z轴的大小，从而控制元素的堆叠顺序，如图10-6和图10-7所示。也就是说，我们可以使用z-index属性将一个元素放置于另外一个元素的下面。
----------------------
2019-03-26
【原文】  认情况下，元素的z-index属性处于不激活状态。也就是说默认情况下，设置元素的z-index属性无效。z-index属性只有在元素定义“position:relative”“position:absolute或者“position:fixed”时才会被激活。当然，对于“position:fixed”的z-index也没什么值得去管，直接忽略即可。
----------------------
2019-03-26
【原文】  C标准中对CSS的z-index属性是这样定义的：“z-index属性设置元素的堆叠顺序，拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。该属性设置一个定位元素沿z轴的位置，z轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数，则表示离用户更远。”
默认情况下，元素z-index属性值为auto。z-index值为正数的元素在z-index值为0的上面，z-index值为负数的元素在z-index值为0的下面。无论是正数还是负数，z-index值较大的元素会叠加在z-index值较小的元素之上。如果z-index值相同，则遵循“后来者居上”规则来叠加，如图10-8所示。
此外要记住一点，如果元素没有指定position属性值（除了static），则z-index属性无效。


● 第11章 CSS图形
----------------------
2019-03-26
【原文】  伙伴们更多时候想到的是用图片来实现。但是在前端开发中，为了网站的性能速度，我们都是秉着“少用图片”的原则。因为图片实现有两个很明显的缺点：一是图片大小比较大，数据传输量大；二是一张图片会引发一次HTTP请求。这两个方面都会影响页面加载速度，并且增加服务器负担


● 11.2 三角形
----------------------
2019-03-26
【原文】  三角形在很多地方都能见到，如下拉菜单、表单注册、用户消息等。图11-5至图11-7这些三角形，都是使用CSS而并非图片来实现的。
----------------------
2019-03-26
【原文】  CSS盒子模型中，当一个盒子的两条边在边角处相交时，浏览器就会在交点处按照某个角度（如果盒子为正方形，则为顺时针45°、135°、225°、315°）绘制一条接合线。
----------------------
2019-03-26
【原文】  我们为每一条边框定义不同的颜色（border-color），并且设置足够大的宽度（border-width），然后可以很明显地看出两条边相交时的效果。如果我们把盒子的宽度（width）和高度（height）都定义为0时
----------------------
2019-03-26
【原文】  border-color属性包含四个值，分别对应“上、右、下、左”四条边颜色，呈顺时针排列。如果将“右、下、左”这三条边颜色改为transparent（透明）会发生什么呢（实际代码如下）？哇！这个时候呈现了一个指向下方的三角形，
----------------------
2019-03-26
【原文】  当然我们也可以定义“下、左”两条边颜色为transparent，这会实现一个指向右上方的三角形，如
----------------------
2019-03-26
【原文】  上面我们可以总结出使用CSS来实现三角形的原理：将一个元素的width和height定义为0，然后为它设置较粗的边框，并且将其中任意三条边框或者两条边的颜色定义为transparent。


● 11.3 圆
----------------------
2019-03-26
【原文】  在CSS中，对于圆角效果我们都是使用CSS3的border-radius属性来实现。语法：
border-radius:长度值;说明：
长度值可以是px、百分比、em等。
----------------------
2019-03-26
【原文】  border-radius属性跟border、padding、margin等属性相似，其属性值也有四种写法。
----------------------
2019-03-26
【原文】  在实际开发中，border-radius属性一般都是设置一个值，使得四个圆角效果都一样。四个圆角都搞得不一样，有必要这么花哨么？当然有啊，像下面这种效果就是这么花哨。
----------------------
2019-03-26
【原文】  圆分为：上半圆、下半圆、左半圆、右半圆。我们只要学会制作某一个方向的半圆，其他方向的半圆都可以轻松实现，因为原理是一样的。
假如我们要制作上半圆，实现原理：把高度height设为宽度width的一半，并且左上角和右上角的圆角半径定义与元素的高度一致，而右下角和左下角的圆角半径定义为0。
----------------------
2019-03-26
【原文】  CSS3中，圆的实现原理如下：元素的宽度和高度定义为相同值，然后四个角的圆角半径定义为宽度（或高度）的一半。


● 11.4 椭圆
----------------------
2019-03-26
【原文】  border-radius属性可以分开，分别为四个角设置相应的圆角值，这四个角的属性如下。
（1）border-top-right-radius：右上角。
（2）border-bottom-right-radius：右下角。
（3）border-bottom-left-radius：左下角。
（4）border-top-left-radius：左上角。
----------------------
2019-03-26
【原文】  在CSS中，我们也是使用border-radius属性来实现椭圆的。语法：
border-radius:x/y;
----------------------
2019-03-26
【原文】  果想要实现椭圆，原理如下：元素的宽度和高度不相等，其中四个角的圆角水平半径定义为宽度的一半，垂直半径定义为高度的一半。


● 12.1 CSS优化简介
----------------------
2019-03-26
【原文】  从以下八个方面来介绍一下CSS性能优化中的各种技巧。
（1）属性缩写。
（2）语法压缩。
（3）图片压缩。
（4）选择器优化。
（5）CSS模块化。
（6）压缩工具。
（7）CSS Sprite技术。
（8）性能评估。


● 12.2 属性缩写
----------------------
2019-03-26
【原文】  CSS中，很多属性是可以缩写的。属性缩写可以减少字符数，使得CSS代码量更少。对于属性缩写，我们主要从四个方面进行优化。
（1）盒模型缩写。
（2）背景缩写。
（3）字体缩写。
（4）颜色值缩写。
【笔记】|  将有相同属性前缀的或者四个方向的合并成一条
----------------------
2019-03-26
【原文】  简写形式
background:url("images/flower.jpg") no-repeat 80px 40px;
在实际开发中，我们推荐使用简写形式。
----------------------
2019-03-26
【原文】  1．完整形式
font-family:"微软雅黑";
font-size:12px;
font-weight:bold
line-height:1.5em;2．简写形式
font:"微软雅黑" 12px/1.5em bold;
----------------------
2019-03-26
【原文】  于字体简写形式，需要注意以下两点。
（1）如果使用字体简写形式，我们至少要指定font-family和font-size属性，其他属性如果没有指定则将自动使用默认值。
（2）在简写形式中，font-size值和line-height值之间是需要加入斜杠“/”的。初学者要特别注意一下这种写法，在实际开发中会经常见到。


● 12.3 语法压缩
----------------------
2019-03-26
【原文】  在CSS中，十六进制的颜色值是可以缩写的。如果每两位的值相同，可以缩写一半。例如“color:#000000”可以缩写为“color:#000”，“color:#336699”可以缩写为“color:#369”。
----------------------
2019-03-26
【原文】  CSS中，很多语法格式其实只是为了方便我们阅读，这些语法格式并不一定必须要使用。如果我们对于一些语法进行精简压缩，则可以减少CSS文件大小，从而减少页面数据传输量。
----------------------
2019-03-26
【原文】  对于语法压缩，我们从以下7个方面进行优化。
（1）空白符。
（2）结尾分号。
（3）url()的引号。
（4）属性值为“0”。
（5）属性值为“以0开头的小数”。
（6）合并相同的定义。
（7）利用继承进行合并。
----------------------
2019-03-26
【原文】  在CSS中，每一个选择器的样式都是用大括号{}括起来。实际上，最后一个属性之后的结尾分号是不必要的。省略之后，对代码没有任何影响。
----------------------
2019-03-26
【原文】  CSS中，像background-image、cursor等属性url()中的路径不需要添加引号。
----------------------
2019-03-26
【原文】  在CSS中，如果某一个属性取值为0，则这个属性值不需要添加单位。
----------------------
2019-03-26
【原文】  在CSS中，很多时候定义的规则会有相同的部分，我们可以使用群组选择器来合并这些相同的样式，从而达到代码重用和精简代码的目的。
----------------------
2019-03-26
【原文】  在CSS中，很多属性是可以继承的。
（1）文本相关属性：font-family、font-size、font-style、font-weight、font、line-height、text-align、text-indent、word-spacing。
（2）列表相关属性：list-style-image、list-style-position、list-style-type、list-style。
（3）颜色相关属性：color。
如果父元素的多个子元素都定义了相同的可继承属性，我们可以把这些相同的属性定义在父元素上，从而精简代码。


● 12.4 压缩工具
----------------------
2019-03-26
【原文】  们都知道CSS文件分为“开发版”和“发布版”。发布版是将开发版进行合并和压缩之后，在网站运行时使用的。
----------------------
2019-03-26
【原文】  CSS压缩工具有在线版、本地版和编辑器插件三种，这里推荐使用在线版的两个工具：CSS Compressor和YUI Compressor。


● 12.5 图片压缩
----------------------
2019-03-26
【原文】  其实在实际开发中，还是建议大家养成良好的优化习惯，然后再使用压缩工具进行辅助。
----------------------
2019-03-26
【原文】  在实际开发中，JPEG.jpg和GIF是最常见的图片格式。深入理解这三种图片格式适合在哪种情况下使用，并且如何减少图片大小非常重要。
（1）JPEG可以很好地处理大面积色调的图像，适合存储颜色丰富的复杂图像，如照片、高清图片等。此外，JPEG不支持透明。
（2．jpg是一种无损格式，可以无损压缩以保证页面打开速度。此外.jpg支持透明。
（3）GIF格式图像效果较差，但是可以制作动画。
也就是说，如果想要展示色彩丰富而高品质图片，可以使用JPEG格式；如果是一般图片，为了减少体积，可以使.jpg格式；如果是动画图片，可以使用GIF格式。
----------------------
2019-03-26
【原文】  图片的传输量在一个页面的传输量中往往占的比重很高，因此对图片大小的压缩尤为重要。图片压缩工具很多，不过以在线工具居多。下面推荐两款比较好的在线工具。
（1）JPEG：推荐JPEGmini，网址：http://www.jpegmini.com
（2．jpg：推荐Tin.jpg，网址：https://tin.jpg.org。这一款在线工具甚至比Photoshop的压缩率还要高，强烈推荐。


● 12.6 高性能的选择器
----------------------
2019-03-26
【原文】  选择器是CSS中最常见的东西。但是很多人却不知道，不同的选择器其实性能是不一样的。了解选择器在浏览器中的解析原理以及不同选择器的解析速度，能够让我们的CSS性能速度锦上添花。
----------------------
2019-03-26
【原文】  浏览器对选择器规则是从右到左进行解析的：首先查找所有的div元素，然后再查找该div元素是否存在具有content类的父元素，最后在已经匹配的父元素中继续向上查找祖先元素是否含有id为column的元素。
----------------------
2019-03-26
【原文】  浏览器解析选择器的原则是从右到左的，因此我们书写的最右边的选择器，被称为关键选择器。这个关键选择器，对于执行效率有决定性的影响
----------------------
2019-03-26
【原文】  谷歌资深Web开发工程师Steve Souders对CSS选择器的匹配效率从高到低做了一个排序。
（1）id选择器。
（2）class选择器。
（3）元素选择器。
（4）相邻选择器。
（5）子选择器。
（6）后代选择器。
（7）通配符选择器。
（8）属性选择器。
（9）伪类选择器。
根据以上“选择器在浏览器的解析原理”以及“各种选择器的匹配效率”，如果我们想要更好地使用高性能的选择器，需要注意以下四个技巧。
----------------------
2019-03-26
【原文】  不要使用通配符
----------------------
2019-03-26
【原文】  通配符的匹配量非常大，一般情况下不建议使用。当然，从上面的CSS选择器匹配效率排序也可以看出来通配符的效率非常低。
----------------------
2019-03-26
【原文】  不
----------------------
2019-03-26
【原文】  不要在id选择器以及class选择器前添加元素名
元素的id在一个页面中具有唯一性，因此在id选择器前添加元素名是多余的，同时也增加了匹配量。
元素的class不具有唯一性，如果在class选择器前添加元素名，则表示选择某一个class的某一种元素。除非是迫不得已的情况，否则尽量不要使用“class选择器前添加元素名”这种方式。
----------------------
2019-03-26
【原文】  选择器最好不要超过三层，位置靠右的选择条件尽可能精确
选择器的层级越多，浏览器解析时匹配的次数就越多，因而速度就越慢。因此在定义选择器时，我们要尽量让选择器的层级少一些，最好不要超过三层。此外，根据选择器在浏览器中从右到左的解析原理可知，位置靠右的选择条件越精确，匹配量就越少，速度就越快。
----------------------
2019-03-26
【原文】  避免使用后代选择器，尽量少用子选择器
后代选择器匹配量比较大，应该避免使用。如果非要用的话，建议使用子选择器代替。但是子选择器匹配量也不小，如果有其他选择器如id选择器或class选择器等代替，也尽量少用子选择器。不过我们要注意一下，尽量少用不等于不用，不要为了减少子选择器的使用而增加过多的id和class，以致id和class泛滥成灾。
----------------------
2019-03-26
【原文】  然对于小项目来说，我们还是在确保CSS的可读性和可维护性良好的前提下，再去考虑高性能的选


● 13.1 水平居中
----------------------
2019-03-26
【原文】  CSS中，对于块元素，如果给定了宽度，直接定义margin-left和margin-right都为auto就能实现水平居中。语法：
margin:0 auto;
----------------------
2019-03-26
【原文】  对于块元素来说，不管父元素的宽度如何，只要给块元素指定宽度，这个方法就有效。如果没有给块元素指定宽度，则块元素默认会占满允许的最大宽度，此时这个方法是没有效的。因此想要使用“margin:0 auto”来实现块元素的水平居中，就一定要指定块元素的宽度。
----------------------
2019-03-26
【原文】  行内元素（inline）以及复合行内元素（inline-*）
对于行内元素（inline）以及复合行内元素（inline-*），我们可以使用“text-align:center”来实现水平居中。


● 13.2 垂直居中
----------------------
2019-03-26
【原文】  单行文字
对于单行文字来说，我们定义line-height和height这两个属性的值相等就可以实现垂直居中。
----------------------
2019-03-26
【原文】  父元素
{
　　　　display:table-cell;
　　　　vertical-align:middle;
}
span{display:inline-block;}说明：
实现的关键是，用一个span标签把所有文字包含起来，然后定义span为inline-block元素，之后使用inline-块元素垂直居中的方式来处理即可
----------------------
2019-03-26
【原文】  块元素的垂直居中一直很麻烦，对于高度已知的块元素，我们可以使用万能的position方法来实现。
使用position方法，父元素和子元素都必须定义宽度和高度，然后给父元素写上“position: relative”，这样做是为了给子元素添加“position:absolute”的时候不会被定位到外太空去。接下来给子元素添加如下属性：
position:absolute;
top:50%;
left:50%;
之后再添加如下属性：
margin-top:"height值一半的负值";
margin-top:"width值一半的负值
----------------------
2019-03-26
【原文】  position这种方法是万能的，也就是不仅可以用于块元素，还可以用于inline、inline-block元素。
----------------------
2019-03-26
【原文】  position方法可以实现水平和垂直两个方向同时居中，如果单独想要水平居中，把top和margin-top这两个属性去掉即可。如果想要单独实现垂直居中，把left和margin-left这两个属性去掉即可。
----------------------
2019-03-26
【原文】  对于行内块元素的垂直居中，我们可以使用“display:table-cell”结合“vertical-middle”来实现


● 13.3 CSS Sprite
----------------------
2019-03-26
【原文】  在浏览网页的过程中，我们经常可以看到很多网站都会使用各种图标、LOGO等，如图13-9和图13-10所示。这些图标很多时候是使用背景图片来实现的。
----------------------
2019-03-26
【原文】  一个好的解决办法就是把这些图标全部放到一张背景图片里面去，这样就只会引发一次HTTP请求了。如果把所有图标放到一张背景图片里面，那该怎么把图标拿出来使用呢？这个我们可以使用CSS中的background-position进行背景定位来取出相应的图标
----------------------
2019-03-26
【原文】  想要使用CSS Sprite，只需要简单的两步即可。
（1）使用Photoshop或者其他工具将小背景图合并成为一张大背景图，其中每一张小背景图要精确调整。
（2）使用background-image属性引入大背景图，并且结合background-position属性定位取出相应的图标。
----------------------
2019-03-26
【原文】  对于CSS Sprite的使用，我们推荐两款非常不错的工具：CSS Sprite Generator和Sprite Cow。其中CSS Sprite Generator是一款在线工具，我们可以上传一个包含多个小背景图的压缩包，然后工具会自动生成大背景图（雪碧图）。此外，这款工具还可以自定义小背景图的位置、透明度以及背景色等。Sprite Cow可以用于自动生成“雪碧图”中某一个小背景图的CSS代码，这样我们就不需要那么麻烦地一个个地去取小背景图的具体位置像素了。
----------------------
2019-03-26
【原文】  CSS Sprite技术最大的优点就是减少HTTP请求数，从而提高页面的加载速度。除了减少HTTP请求数，CSS Sprite还减小了图片整体的大小。一般情况下，几张小图片合并成一张大图片后的大小总是小于这几种小图标的大小总和。
不过CSS Sprite也存在很明显的缺点，那就是“开发和维护比较困难”。在开发过程中，需要精准计算每个小背景图在大背景图中的位置，比较繁琐复杂。在维护过程中，有时候需要增加新的小背景图，可能需要调整已有的小背景图位置，这样又得重新精准调整小背景图的位置。
----------------------
2019-03-26
【原文】  在开发后期而不是开发前期使用CSS Sprite。
----------------------
2019-03-26
【原文】  雪碧图”的制作比较繁琐，如果在开发前期就使用，可能雪碧图中小背景图位置得经常改变，维护起来比较麻烦。因此建议在开发后期再使用CSS Sprite。
----------------------
2019-03-26
【原文】  有条理地组织“雪碧图”。
我们将小背景图合并成“雪碧图”的时候，应该将小背景图按照类别、风格、大小等分门别类地放好，不要东放一个西放一个。有条理地组织“雪碧图”便于后期的维护。
----------------------
2019-03-26
【原文】  控制“雪碧图”的大小。
据研究表明，如果图片的大小在200KB以内，则图片传输的时间是差不多的。因此，“雪碧图”最好不要超过200KB。如果图片太大，会耗费更多的传输时间


● 13.4 Icon Font图标
----------------------
2019-03-26
【原文】  想要实现小图标效果，比较好的解决方法就是使用icon font图标技术。所谓的“icon font图标技术”，指的就是使用字体文件取代图片文件，来实现小图标效果。
----------------------
2019-03-26
【原文】  从iconfont网站下载的文件中，有几个是比较重要的：iconfont.eot、iconfont.svg、iconfont.ttf、iconfont.woff，如表13-1所示。其实这四个都是字体文件，我们简单了解一下即可。
----------------------
2019-03-26
【原文】  使用iconfont图标的关键语法就是@font-face。@font-face用于自定义字体，具体语法不在此展开，可以参考绿叶学习官网的CSS3教程中“嵌入字体@font-face”这一节。“-webkit-font-smoothing:antialiased;”用于webkit引擎浏览器中的抗锯齿，而“-moz-osx-font-smoothing:grayscale;”用于Mac OSX Firefox浏览器中的抗锯齿。
上面代码看似很复杂，但是我们也没必要记住。在实际开发中，我们直接复制过去用就行了。
----------------------
2019-03-26
【原文】  小伙伴们可能会觉得很奇怪，“&#xe654;”这个是什么？其实从iconfont网站下载下来的文件中有一个“demo.html”，我们点击进去可以看到每个图标都有对应一个字符串。我们想要使用哪个小图标，就写上对应的字符串即可，
----------------------
2019-03-26
【原文】  也就是说，如果我们想要在页面中使用iconfont图标，必须要有四步。
（1）下载好图标字体文件并且放入网站目录中。
（2）在CSS中，使用@font-face自定义字体。
（3）在HTML中，元素添加class="iconfont"。
（4）在元素中添加图标对应的字符串。举例：
----------------------
2019-03-26
【原文】  对于iconfont图标技术，还有两点补充说明。
（1）iconfont官网除了提供字体图标，还提供图标管理、WebFont技术等服务。我们应该到官网自己摸索一下，了解这些会给你的前端开发带来很大的帮助；
（2）对于字体图标，如果iconfont官网满足不了你的需求，我们可以访问国外最大的图标分享网站icomoon。


● 第14章 重要概念
----------------------
2019-03-26
【原文】  了解这些概念对你深入理解CSS的本质相当重要：
（1）包含块containing block。
（2）BFC和IFC。
（3）层叠上下文。


● 14.2 包含块
----------------------
2019-03-26
【原文】  包含块是什么呢？简单来说，就是可以决定一个元素大小和定位的元素。
包含块是视觉格式化模型中的一个重要概念，它与CSS盒子模型类似。包含块也可以理解为一个矩形盒子，这个矩形的作用是为这个矩形内部的后代元素（子元素、孙元素等）提供一个参考。一个元素的大小和定位往往是由该元素所在的包含块决定的。
----------------------
2019-03-26
【原文】  通常情况下，一个元素的包含块是由离它最近的“块级祖先元素”的“内容边界”决定的。但当元素被设置为绝对定位时，此时该元素的包含块是由离它最近的“position:relative”或“position:absolute”的祖先元素决定。一个元素生成的盒子会扮演该元素的内部元素包含块的角色。也就是说，一个元素的CSS盒子为它的内部元素建造了包含块。
----------------------
2019-03-26
【原文】  根元素（HTML元素），是一个页面中最顶端的元素，它没有父元素。根元素存在的包含块，被称为“初始包含块（initial containing block）。
----------------------
2019-03-26
【原文】  如果元素的position属性为fixed，那么它的包含块是当前可视窗口，也就是当前浏览器窗口。
----------------------
2019-03-26
【原文】  如果元素的position属性为static或relative，那么它的包含块是它最近的块级祖先元素创建的。祖先元素必须是block、inline-block或者table-cell类型。


● 14.3 层叠上下文
----------------------
2019-03-26
【原文】  层叠上下文也许我们比较少接触，但这却是一个非常重要的概念。理解层叠上下文，不仅可以帮助我们深入理解z-index对元素堆叠顺序的控制，而且对于我们深入理解浮动和定位也是非常重要的。
----------------------
2019-03-26
【原文】  层叠上下文跟块级格式上下文（BFC）相似，是可以创建出来的。也就是说，跟创建BFC一样，你可以在CSS中添加一定的属性来将某个元素创建一个层叠上下文出
----------------------
2019-03-26
【原文】  如果一个元素具备以下任何一个条件（不考虑CSS3），则该元素会创建一个新的层叠上下文。
（1）根元素。
（2）z-index不为auto的定位元素。
----------------------
2019-03-26
【原文】  根元素会创建一个层叠上下文，我们称之为“根层叠上下文”。这个与根元素创建一个BFC是一样的
----------------------
2019-03-26
【原文】  同一个层叠上下文的背景色以及内部元素，谁在上谁在下，这些都是由层叠级别”来决定的。也就是说，层叠级别是针对同一个层叠上下文而言的。层叠级别与层叠上下文，是两个不同的概念，
----------------------
2019-03-26
【原文】  在同一个层叠上下文中，层叠级别从低到高排列，如图14-1所示。
（1）背景和边框（父级）：也就是当前层叠上下文的背景和边框。
（2）负z-index：z-index为负值的“内部元素”。
（3）块盒子：普通文档流下的块盒子（block-level box）。
（4）浮动盒子：非定位的浮动元素（也就是排除了position:relative的浮动盒子）。
（5）行内盒子：普通文档流下的行内盒子（inline-level box）。
（5）z-index:0：z-index为0的“内部元素”。
（6）正z-index：z-index为正值的“内部元素”。
图14-1 同一层叠上下文中的“层叠级别”
从上图我们可以得到以下结论。
（1）除了“背景和边框”这一条是当前层叠上下文之外，其他的都是针对当前层叠上下文内部的元素。
（2）关于块盒子（block-level box）和行内盒子（inline-level box），我们在下一节“BFC和IFC”中会给大家介绍。注意，inline-block元素不是块盒子，而是行内盒子。
（3）父元素内部的元素（即后代元素），如果它是一个z-index取值不为auto的定位元素，则这个元素会创建新的层叠上下文。不过这个由内部元素创建的层叠上下文依旧属于父层叠上下文的一部分。也就是说，层叠上下文是可以嵌套的，内部元素所创建的层叠上下文均受制于父元素创建的层叠上下文。
----------------------
2019-03-26
【原文】  背景和边框一般为装饰属性，所以层叠级别最低。浮动元素和块元素一般用作布局，而行内元素都是内容。对于一个页面来说，最重要的当然是内容。因此，一定要让内容的层叠级别相当高。
----------------------
2019-03-26
【原文】  层叠上下文的特点
一个元素在z轴方向上的堆叠顺序，是由“层叠上下文”和“层叠级别”这两个因素决定的：
（1）同一个层叠上下文中，我们比较的是“内部元素层叠级别”。层叠级别大的元素显示在上，层叠级别小的元素显示在下。
（2）同一个层叠上下文中，如果两个元素的层叠级别相同（即z-index值相同），则后面的元素堆叠在前面元素的上面，遵循“后来者居上”原则。
（3）不同的层叠上下文中，我们比较的是“父级元素层叠级别”。元素显示顺序以“父级层叠上下文”的层叠级别来决定显示的先后顺序，与自身的层叠级别无关。


● 14.4 BFC和IFC
----------------------
2019-03-26
【原文】  在CSS中，页面中任何一个元素都可以看成是一个盒子。在普通文档流（normal flow）中，盒子会参与一种格式上下文（formatting context）。这个盒子可能是块盒子（block-level box），也可能是行内盒子（inline-level box）
----------------------
2019-03-26
【原文】  其中块盒子参与BFC（块级格式上下文），行内盒子参与IFC（行级格式上下文）。
----------------------
2019-03-26
【原文】  格式上下文有两种。
（1）块级格式上下文（Block Formatting Context，BFC）。
（2）行级格式上下文（Inline Formatting Context，IFC）。
----------------------
2019-03-26
【原文】  W3C标准中对BFC的定义：浮动元素，绝对定位元素（position为absolute或fixed），元素类型（即display属性）为inline-block、table-caption、table-cell，以及overflow属性不为visible的元素将会创建一个新的块级格式上下文（BFC）。
----------------------
2019-03-26
【原文】  如果一个元素具备以下任何一个条件，则该元素都会创建一个新的BFC。
（1）根元素。
（2）float属性除了none以外的值，也就是“float:left”和“float:right”。
（3）position属性除了static和relative以外的值，也就是“position:absolute”和“position:fixed”。
（4）overflow属性除了visible以外的值，也就是“overflow:auto”“overflow:hidden”和“overflow:scroll”。
（5）元素类型（即display属性）为inline-block、table-caption、table-cell。
----------------------
2019-03-26
【原文】  这里要注意一下，类型为flex和inline-flex的元素也会创建BFC，只不过这些是CSS3的内容，我们在此忽略。此外根据定义，类型为block、table的元素不会创建BFC。小伙伴们可能就有疑问了，为什么block类型元素不会创建BFC啊？最开始提到：元素类型（即display属性）为block、table、list-item的元素，会生成块盒子（block-level box），然后块盒子会参与BFC。其实从这句话我们已经得到明确答案了：block、table、list-item等类型的元素的是参与BFC，而不是创建BFC。
----------------------
2019-03-26
【原文】  3C标准描述BFC的特点共有两条：
（1）在一个BFC中，盒子从顶端开始垂直一个接着一个地排列，两个相邻盒子之间的垂直间距由margin属性决定。在同一个BFC中，两个相邻块盒子之间垂直方向上的外边距会叠加。
（2）在一个BFC中，每一个盒子的左外边界（margin-left）会紧贴着容器的左边（border-left）（对于从右到左的格式化，则相反），即使存在浮动元素也是如此。
----------------------
2019-03-26
【原文】  从上面的W3C标准定义，我们可以得出以下几点重要结论（非常重要，请字斟句酌地理解记忆）。
（1）在一个BFC内部，盒子会在垂直方向上一个接着一个地排列。
（2）在一个BFC内部，相邻的margin-top和margin-bottom会叠加。
（3）在一个BFC内部，每一个元素的左外边界会紧贴着包含盒子的左边，即使存在浮动也是如此。
（4）在一个BFC内部，如果存在内部元素是一个新的BFC，并且存在内部元素是浮动元素。则该BFC的区域不会与float元素的区域重叠。
（5）BFC就是页面上的一个隔离的盒子，该盒子内部的子元素不会影响到外面的元素。
（6）计算一个BFC的高度时，其内部浮动元素的高度也会参与计算。
----------------------
2019-03-26
【原文】  上面给大家介绍了BFC的特点以及如何创建一个新的BFC。说了那么多，那BFC究竟有什么用呢？BFC的用途很多，常见的有三个。
（1）创建BFC来避免垂直外边距叠加。
（2）创建BFC来清除浮动。
（3）创建BFC来实现自适应布局。


来自京东读书for Android
导出于 2019-03-26
